// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using allshop.repository.Context;

#nullable disable

namespace allshop.repository.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230316211750_Init14")]
    partial class Init14
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("allshop.domain.Entities.Archivo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CodigoClave")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extencion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TamanoKb")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.ToTable("Archivo");
                });

            modelBuilder.Entity("allshop.domain.Entities.Auth.AuthRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("allshop.domain.Entities.Auth.AuthUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EmailAlternativo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Externo")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("allshop.domain.Entities.Categoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("allshop.domain.Entities.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ApellidoElegido")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DireccionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Documento")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("IdEntidad")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdPieNota")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTipoIva")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ImputacionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Movil")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NIF")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NombreElegido")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NombreEnDocumento")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Web")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ImputacionId");

                    b.ToTable("Cliente", (string)null);
                });

            modelBuilder.Entity("allshop.domain.Entities.Direccion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoAfip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdLocalidad")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdPais")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProvincia")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Oobservacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Direcciones");
                });

            modelBuilder.Entity("allshop.domain.Entities.Imputacion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Abril")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("Activo")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Agosto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Diciembre")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Enero")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Febrero")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("IdSubRubro")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("IdTipo")
                        .HasColumnType("int");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<decimal?>("Julio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Junio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Marzo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Mayo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Noviembre")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Octubre")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SaldoFin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SaldoInicial")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Septiembre")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UltimaModificacion")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Imputaciones");
                });

            modelBuilder.Entity("allshop.domain.Entities.Producto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Codigo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CodigoBarras")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(350)");

                    b.Property<string>("DescripcionCorta")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ImputacionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Observaciones")
                        .HasColumnType("varchar(max)");

                    b.Property<decimal?>("PrecioAlmacen")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("PrecioCompra")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("PrecioIva")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("PrecioPvp")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("PrecioTienda")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("PrecioWeb")
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid>("ProductoEstadoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductoMasOpcionesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Referencia")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ImputacionId");

                    b.HasIndex("ProductoEstadoId");

                    b.HasIndex("ProductoMasOpcionesId")
                        .IsUnique();

                    b.ToTable("Producto", (string)null);
                });

            modelBuilder.Entity("allshop.domain.Entities.ProductoEstado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ProductoEstado");
                });

            modelBuilder.Entity("allshop.domain.Entities.ProductoMasOpciones", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Alto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ancho")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdMarca")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Kilo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Largo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Litro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PublicacionWeb")
                        .HasColumnType("bit");

                    b.Property<string>("UnidadPorCaja")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ProductoMasOpciones");
                });

            modelBuilder.Entity("allshop.domain.Entities.ProductoProveedor", b =>
                {
                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProveedor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProveedorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("IdProducto", "IdProveedor");

                    b.HasIndex("ProductoId");

                    b.HasIndex("ProveedorId");

                    b.ToTable("ProductoProveedor");
                });

            modelBuilder.Entity("allshop.domain.Entities.ProductoSize", b =>
                {
                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdSize")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("IdProducto", "IdSize");

                    b.HasIndex("ProductoId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductoSize");
                });

            modelBuilder.Entity("allshop.domain.Entities.Proveedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Codpostal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cuentabancaria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cuit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("IdEntidad")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdProvincia")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Localidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Movil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nif")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Web")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Proveedores");
                });

            modelBuilder.Entity("allshop.domain.Entities.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Size");
                });

            modelBuilder.Entity("CategoriaProducto", b =>
                {
                    b.Property<Guid>("CategoriasId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductosId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoriasId", "ProductosId");

                    b.HasIndex("ProductosId");

                    b.ToTable("CategoriaProducto");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("allshop.domain.Entities.Archivo", b =>
                {
                    b.HasOne("allshop.domain.Entities.Producto", "Producto")
                        .WithMany("Archivos")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("allshop.domain.Entities.Cliente", b =>
                {
                    b.HasOne("allshop.domain.Entities.Cliente", null)
                        .WithMany("Producto")
                        .HasForeignKey("ClienteId");

                    b.HasOne("allshop.domain.Entities.Imputacion", "Imputacion")
                        .WithMany()
                        .HasForeignKey("ImputacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Imputacion");
                });

            modelBuilder.Entity("allshop.domain.Entities.Producto", b =>
                {
                    b.HasOne("allshop.domain.Entities.Imputacion", "Imputacion")
                        .WithMany("Producto")
                        .HasForeignKey("ImputacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("allshop.domain.Entities.ProductoEstado", "ProductoEstado")
                        .WithMany("Producto")
                        .HasForeignKey("ProductoEstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("allshop.domain.Entities.ProductoMasOpciones", "ProductoMasOpciones")
                        .WithOne("Producto")
                        .HasForeignKey("allshop.domain.Entities.Producto", "ProductoMasOpcionesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Imputacion");

                    b.Navigation("ProductoEstado");

                    b.Navigation("ProductoMasOpciones");
                });

            modelBuilder.Entity("allshop.domain.Entities.ProductoProveedor", b =>
                {
                    b.HasOne("allshop.domain.Entities.Producto", null)
                        .WithMany("ProductoProveedores")
                        .HasForeignKey("ProductoId");

                    b.HasOne("allshop.domain.Entities.Proveedor", null)
                        .WithMany("ProductoProveedores")
                        .HasForeignKey("ProveedorId");
                });

            modelBuilder.Entity("allshop.domain.Entities.ProductoSize", b =>
                {
                    b.HasOne("allshop.domain.Entities.Producto", null)
                        .WithMany("ProductoSize")
                        .HasForeignKey("ProductoId");

                    b.HasOne("allshop.domain.Entities.Size", null)
                        .WithMany("ProductoSize")
                        .HasForeignKey("SizeId");
                });

            modelBuilder.Entity("CategoriaProducto", b =>
                {
                    b.HasOne("allshop.domain.Entities.Categoria", null)
                        .WithMany()
                        .HasForeignKey("CategoriasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("allshop.domain.Entities.Producto", null)
                        .WithMany()
                        .HasForeignKey("ProductosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("allshop.domain.Entities.Auth.AuthRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("allshop.domain.Entities.Auth.AuthUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("allshop.domain.Entities.Auth.AuthUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("allshop.domain.Entities.Auth.AuthRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("allshop.domain.Entities.Auth.AuthUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("allshop.domain.Entities.Auth.AuthUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("allshop.domain.Entities.Cliente", b =>
                {
                    b.Navigation("Producto");
                });

            modelBuilder.Entity("allshop.domain.Entities.Imputacion", b =>
                {
                    b.Navigation("Producto");
                });

            modelBuilder.Entity("allshop.domain.Entities.Producto", b =>
                {
                    b.Navigation("Archivos");

                    b.Navigation("ProductoProveedores");

                    b.Navigation("ProductoSize");
                });

            modelBuilder.Entity("allshop.domain.Entities.ProductoEstado", b =>
                {
                    b.Navigation("Producto");
                });

            modelBuilder.Entity("allshop.domain.Entities.ProductoMasOpciones", b =>
                {
                    b.Navigation("Producto")
                        .IsRequired();
                });

            modelBuilder.Entity("allshop.domain.Entities.Proveedor", b =>
                {
                    b.Navigation("ProductoProveedores");
                });

            modelBuilder.Entity("allshop.domain.Entities.Size", b =>
                {
                    b.Navigation("ProductoSize");
                });
#pragma warning restore 612, 618
        }
    }
}
